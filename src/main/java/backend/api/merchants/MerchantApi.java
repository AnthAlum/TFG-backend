/**
 * NOTE: This class is auto generated by the swagger code generator program (3.0.24).
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */
package io.swagger.api;

import io.swagger.model.Comercial;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import io.swagger.v3.oas.annotations.responses.ApiResponses;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.media.ArraySchema;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RequestPart;
import org.springframework.web.multipart.MultipartFile;
import org.springframework.web.bind.annotation.CookieValue;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
import java.util.Map;

@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.SpringCodegen", date = "2021-01-27T22:09:33.361636800+01:00[Europe/Paris]")
public interface MerchantApi {

    @Operation(summary = "Elimina  un comercial", description = "Elimina un comercial.", tags={ "Comerciales" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "Eliminacion finalizada."),
        
        @ApiResponse(responseCode = "404", description = "Comercial no encontrado.") })
    @RequestMapping(value = "/merchant/{merchantId}",
        method = RequestMethod.DELETE)
    ResponseEntity<Void> deleteMerchant(@Parameter(in = ParameterIn.PATH, description = "Merchant ID", required=true, schema=@Schema()) @PathVariable("merchantId") Long merchantId);


    @Operation(summary = "Obtiene la informacion de un comercial a partir de su ID.", description = "Esta operacion devuelve la informacion asociada a un comercial a partir de un ID.", tags={ "Comerciales" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "Operacion completada.", content = @Content(schema = @Schema(implementation = Comercial.class))),
        
        @ApiResponse(responseCode = "404", description = "Comercial no encontrado.") })
    @RequestMapping(value = "/merchant/{merchantId}",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<Comercial> getMerchant(@Parameter(in = ParameterIn.PATH, description = "Merchant ID", required=true, schema=@Schema()) @PathVariable("merchantId") Long merchantId);


    @Operation(summary = "Modifica la informacion de un comercial", description = "Modifica la informacion de un comercial actualizando los valores que vienen definidos en la peticion.", tags={ "Comerciales" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "Informacion actualizada."),
        
        @ApiResponse(responseCode = "404", description = "El ID indicado no hace referencia a ningun comercial.") })
    @RequestMapping(value = "/merchant/{merchantId}",
        consumes = { "application/json" }, 
        method = RequestMethod.PUT)
    ResponseEntity<Void> modifyMerchant(@Parameter(in = ParameterIn.PATH, description = "El ID del comercial a modificar.", required=true, schema=@Schema()) @PathVariable("merchantId") Long merchantId, @Parameter(in = ParameterIn.DEFAULT, description = "", schema=@Schema()) @Valid @RequestBody Comercial body);

}

