/**
 * NOTE: This class is auto generated by the swagger code generator program (3.0.24).
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */
package backend.api.merchants;

import io.swagger.annotations.ApiParam;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.responses.ApiResponses;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;

import javax.validation.Valid;

@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.SpringCodegen", date = "2021-01-27T22:09:33.361636800+01:00[Europe/Paris]")
public interface MerchantApi {
    @CrossOrigin(origins = "*")
    @Operation(summary = "Deletes a merchant", description = "Deletes a merchant of the given ID.", tags={ "Merchant" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "Client deleted sucessfully."),
        
        @ApiResponse(responseCode = "404", description = "Merchant not found with the given ID.") })
    @RequestMapping(value = "/merchants/{merchantId}",
        method = RequestMethod.DELETE)
    ResponseEntity<Void> deleteMerchant(@Parameter(in = ParameterIn.PATH, description = "Merchant's ID", required=true, schema=@Schema()) @PathVariable("merchantId") Long merchantId);

    @CrossOrigin(origins = "http://localhost:4200")
    @Operation(summary = "Returns merchant's information.", description = "Returns merchant's information of the given ID.", tags={ "Merchant" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "Request completed.", content = @Content(schema = @Schema(implementation = MerchantResponse.class))),
        
        @ApiResponse(responseCode = "404", description = "Merchant not found with the given ID.") })
    @RequestMapping(value = "/merchants/{merchantId}",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<MerchantResponse> getMerchantById(@Parameter(in = ParameterIn.PATH, description = "Merchant's ID", required=true, schema=@Schema()) @PathVariable("merchantId") Long merchantId);

    @Operation(summary = "Returns merchant's information.", description = "Returns merchant's information of the given email.", tags={ "Merchant" })
    @ApiResponses(value = {
            @ApiResponse(responseCode = "200", description = "Request completed.", content = @Content(schema = @Schema(implementation = MerchantResponse.class))),
            @ApiResponse(responseCode = "403", description = "You are not allowed for use this method."),
            @ApiResponse(responseCode = "404", description = "Merchant not found with the given email.") })
    @RequestMapping(value = "/merchants/email",
            produces = { "application/json" },
            method = RequestMethod.GET)
    ResponseEntity<MerchantResponse> getMerchantByEmail(@ApiParam(value = "the email for filtering")  @Valid @RequestParam("email") String merchantEmail);


    @CrossOrigin(origins = "http://localhost:4200")
    @Operation(summary = "Change merchant's name", description = "Change merchant's name with the given new name.", tags={ "Merchant" })
    @ApiResponses(value = {
            @ApiResponse(responseCode = "200", description = "Name updated successfully."),

            @ApiResponse(responseCode = "404", description = "Merchant not found with the given ID.") })
    @RequestMapping(value = "/merchants/{merchantId}/name",
            consumes = { "application/json" },
            method = RequestMethod.PUT)
    ResponseEntity<Void> modifyMerchantName(@Parameter(in = ParameterIn.PATH, description = "Merchant's ID.", required=true, schema=@Schema()) @PathVariable("merchantId") Long merchantId, @Parameter(in = ParameterIn.DEFAULT, description = "", schema=@Schema()) @Valid @RequestBody MerchantNameChangeRequest body);

    @CrossOrigin(origins = "http://localhost:4200")
    @Operation(summary = "Change merchant's email.", description = "Change merchant's email with the given new email .", tags={ "Merchant" })
    @ApiResponses(value = {
            @ApiResponse(responseCode = "200", description = "Email updated successfully."),

            @ApiResponse(responseCode = "404", description = "Merchant not found with the given ID.") })
    @RequestMapping(value = "/merchants/{merchantId}/email",
            consumes = { "application/json" },
            method = RequestMethod.PUT)
    ResponseEntity<Void> modifyMerchantEmail(@Parameter(in = ParameterIn.PATH, description = "Merchant's ID.", required=true, schema=@Schema()) @PathVariable("merchantId") Long merchantId, @Parameter(in = ParameterIn.DEFAULT, description = "", schema=@Schema()) @Valid @RequestBody MerchantEmailChangeRequest body);

    @CrossOrigin(origins = "http://localhost:4200")
    @Operation(summary = "Change merchant's phone number.", description = "Change merchant's phone number with the given new phone number.", tags={ "Merchant" })
    @ApiResponses(value = {
            @ApiResponse(responseCode = "200", description = "Phone number updated successfully."),
            @ApiResponse(responseCode = "404", description = "Merchant not found with the given ID.") })
    @RequestMapping(value = "/merchants/{merchantId}/phone",
            consumes = { "application/json" },
            method = RequestMethod.PUT)
    ResponseEntity<Void> modifyMerchantPhone(@Parameter(in = ParameterIn.PATH, description = "Merchant's ID.", required=true, schema=@Schema()) @PathVariable("merchantId") Long merchantId, @Parameter(in = ParameterIn.DEFAULT, description = "", schema=@Schema()) @Valid @RequestBody MerchantPhoneChangeRequest body);

    @CrossOrigin(origins = "http://localhost:4200")
    @Operation(summary = "Change merchant's role.", description = "Change merchant's role with the given new role.", tags={ "Merchant" })
    @ApiResponses(value = {
            @ApiResponse(responseCode = "200", description = "Role updated successfully."),

            @ApiResponse(responseCode = "404", description = "Merchant not found with the given ID.") })
    @RequestMapping(value = "/merchants/{merchantId}/role",
            consumes = { "application/json" },
            method = RequestMethod.PUT)
    ResponseEntity<Void> modifyMerchantRole(@Parameter(in = ParameterIn.PATH, description = "Merchant's ID.", required=true, schema=@Schema()) @PathVariable("merchantId") Long merchantId, @Parameter(in = ParameterIn.DEFAULT, description = "", schema=@Schema()) @Valid @RequestBody MerchantRoleChangeRequest body);

    @CrossOrigin(origins = "http://localhost:4200")
    @Operation(summary = "Change merchant's password.", description = "Change merchant's password with the given new role.", tags={ "Merchant" })
    @ApiResponses(value = {
            @ApiResponse(responseCode = "200", description = "Password updated successfully."),

            @ApiResponse(responseCode = "404", description = "Merchant not found with the given ID.") })
    @RequestMapping(value = "/merchants/{merchantId}/password",
            consumes = { "application/json" },
            method = RequestMethod.PUT)
    ResponseEntity<Void> modifyMerchantPassword(@Parameter(in = ParameterIn.PATH, description = "Merchant's ID.", required=true, schema=@Schema()) @PathVariable("merchantId") Long merchantId, @Parameter(in = ParameterIn.DEFAULT, description = "", schema=@Schema()) @Valid @RequestBody MerchantPasswordChangeRequest body);


}

