/**
 * NOTE: This class is auto generated by the swagger code generator program (3.0.24).
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */
package backend.api.merchants;

import io.swagger.annotations.ApiParam;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.responses.ApiResponses;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;

import javax.validation.Valid;

public interface MerchantsApi {
    @CrossOrigin(origins = "http://localhost:4200")
    @Operation(summary = "Creates a merchant.", description = "Creates a merchant with  the given information in the request", tags={ "Merchant" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "201", description = "Merchant created successfully."),
        @ApiResponse(responseCode = "400", description = "The request has an invalid input") })
    @RequestMapping(value = "/merchants",
        consumes = { "application/json" }, 
        method = RequestMethod.POST)
    ResponseEntity<Void> addMerchant(@Parameter(in = ParameterIn.DEFAULT, description = "", schema=@Schema()) @Valid @RequestBody MerchantRegistrationRequest body);

    @CrossOrigin(origins = "http://localhost:4200")
    @Operation(summary = "Returns all merchants information", description = "Returns all merchants information in a list.", tags={ "Merchant" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "Request completed.", content = @Content(schema = @Schema(implementation = MerchantListResponse.class))),
        @ApiResponse(responseCode = "403", description = "You are not allowed for use this method.") })
    @RequestMapping(value = "/merchants",
        produces = { "application/json" },
        method = RequestMethod.GET)
    ResponseEntity<MerchantPaginatedResponse> getMerchants(
            @ApiParam(value = "the number of the page") @Valid @RequestParam(value = "page", required = false, defaultValue = "0") Integer pageNumber,
            @ApiParam(value = "the number of element per page") @Valid @RequestParam(value = "size", required = false, defaultValue = "25") Integer size);

    @Operation(summary = "Returns all merchants information simplified", description = "Returns all merchants information simplified in a list.", tags={ "Merchant" })
    @ApiResponses(value = {
            @ApiResponse(responseCode = "200", description = "Request completed.", content = @Content(schema = @Schema(implementation = MerchantListResponse.class))),
            @ApiResponse(responseCode = "403", description = "You are not allowed for use this method.") })
    @RequestMapping(value = "/merchants-simplified",
            produces = { "application/json" },
            method = RequestMethod.GET)
    ResponseEntity<MerchantsSimplifiedListResponse> getMerchantsSimplified();

    @CrossOrigin(origins = "http://localhost:4200")
    @Operation(summary = "Returns all merchants information", description = "Returns all merchants information in a list.", tags={ "Merchant" })
    @ApiResponses(value = {
            @ApiResponse(responseCode = "200", description = "Request completed.", content = @Content(schema = @Schema(implementation = MerchantListResponse.class))),
            @ApiResponse(responseCode = "403", description = "You are not allowed for use this method.") })
    @RequestMapping(value = "/merchants/findbyemail",
            produces = { "application/json" },
            method = RequestMethod.GET)
    ResponseEntity<MerchantPaginatedResponse> getMerchantsByEmail(
            @ApiParam(value = "the email for filtering") @Valid @RequestParam(value = "email", required = true, defaultValue = "") String email,
            @ApiParam(value = "the number of the page") @Valid @RequestParam(value = "page", required = true, defaultValue = "0") Integer pageNumber,
            @ApiParam(value = "the number of element per page") @Valid @RequestParam(value = "size", required = true, defaultValue = "25") Integer size);

    @CrossOrigin(origins = "http://localhost:4200")
    @Operation(summary = "Returns all merchants information", description = "Returns all merchants information in a list.", tags={ "Merchant" })
    @ApiResponses(value = {
            @ApiResponse(responseCode = "200", description = "Request completed.", content = @Content(schema = @Schema(implementation = MerchantListResponse.class))),
            @ApiResponse(responseCode = "403", description = "You are not allowed for use this method.") })
    @RequestMapping(value = "/merchants/findbyname",
            produces = { "application/json" },
            method = RequestMethod.GET)
    ResponseEntity<MerchantPaginatedResponse> getMerchantsByName(
            @ApiParam(value = "the email for filtering") @Valid @RequestParam(value = "name", required = true, defaultValue = "") String name,
            @ApiParam(value = "the number of the page") @Valid @RequestParam(value = "page", required = true, defaultValue = "0") Integer pageNumber,
            @ApiParam(value = "the number of element per page") @Valid @RequestParam(value = "size", required = true, defaultValue = "25") Integer pageSize);

    @CrossOrigin(origins = "http://localhost:4200")
    @Operation(summary = "Returns all merchants information", description = "Returns all merchants information in a list.", tags={ "Merchant" })
    @ApiResponses(value = {
            @ApiResponse(responseCode = "200", description = "Request completed.", content = @Content(schema = @Schema(implementation = MerchantListResponse.class))),
            @ApiResponse(responseCode = "403", description = "You are not allowed for use this method.") })
    @RequestMapping(value = "/merchants/findbyphone",
            produces = { "application/json" },
            method = RequestMethod.GET)
    ResponseEntity<MerchantPaginatedResponse> getMerchantsByPhone(
            @ApiParam(value = "the email for filtering") @Valid @RequestParam(value = "phone", required = false, defaultValue = "") String phone,
            @ApiParam(value = "the number of the page") @Valid @RequestParam(value = "page", required = false, defaultValue = "0") Integer pageNumber,
            @ApiParam(value = "the number of element per page") @Valid @RequestParam(value = "size", required = false, defaultValue = "25") Integer size);

    @CrossOrigin(origins = "http://localhost:4200")
    @Operation(summary = "Returns all merchants information", description = "Returns all merchants information in a list.", tags={ "Merchant" })
    @ApiResponses(value = {
            @ApiResponse(responseCode = "200", description = "Request completed.", content = @Content(schema = @Schema(implementation = MerchantListResponse.class))),
            @ApiResponse(responseCode = "403", description = "You are not allowed for use this method.") })
    @RequestMapping(value = "/merchants/findbyidRole",
            produces = { "application/json" },
            method = RequestMethod.GET)
    ResponseEntity<MerchantPaginatedResponse> getMerchantsByIdRole(
            @ApiParam(value = "the idRole for filtering") @Valid @RequestParam(value = "idRole", required = false, defaultValue = "0") Integer idRole,
            @ApiParam(value = "the number of the page") @Valid @RequestParam(value = "page", required = false, defaultValue = "0") Integer pageNumber,
            @ApiParam(value = "the number of element per page") @Valid @RequestParam(value = "size", required = false, defaultValue = "25") Integer size);

}

